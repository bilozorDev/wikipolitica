/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StatusStatusImport } from './routes/status/Status'
import { Route as RoadmapRoadmapImport } from './routes/roadmap/Roadmap'
import { Route as HomeOverviewImport } from './routes/home/Overview'
import { Route as FaqFAQImport } from './routes/faq/FAQ'
import { Route as ExecutiveVicePresidentImport } from './routes/executive/VicePresident'
import { Route as ExecutivePresidentialScheduleImport } from './routes/executive/PresidentialSchedule'
import { Route as ExecutivePresidentialActionsImport } from './routes/executive/PresidentialActions'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const StatusStatusRoute = StatusStatusImport.update({
  id: '/status/Status',
  path: '/status/Status',
  getParentRoute: () => rootRoute,
} as any)

const RoadmapRoadmapRoute = RoadmapRoadmapImport.update({
  id: '/roadmap/Roadmap',
  path: '/roadmap/Roadmap',
  getParentRoute: () => rootRoute,
} as any)

const HomeOverviewRoute = HomeOverviewImport.update({
  id: '/home/Overview',
  path: '/home/Overview',
  getParentRoute: () => rootRoute,
} as any)

const FaqFAQRoute = FaqFAQImport.update({
  id: '/faq/FAQ',
  path: '/faq/FAQ',
  getParentRoute: () => rootRoute,
} as any)

const ExecutiveVicePresidentRoute = ExecutiveVicePresidentImport.update({
  id: '/executive/VicePresident',
  path: '/executive/VicePresident',
  getParentRoute: () => rootRoute,
} as any)

const ExecutivePresidentialScheduleRoute =
  ExecutivePresidentialScheduleImport.update({
    id: '/executive/PresidentialSchedule',
    path: '/executive/PresidentialSchedule',
    getParentRoute: () => rootRoute,
  } as any)

const ExecutivePresidentialActionsRoute =
  ExecutivePresidentialActionsImport.update({
    id: '/executive/PresidentialActions',
    path: '/executive/PresidentialActions',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/executive/PresidentialActions': {
      id: '/executive/PresidentialActions'
      path: '/executive/PresidentialActions'
      fullPath: '/executive/PresidentialActions'
      preLoaderRoute: typeof ExecutivePresidentialActionsImport
      parentRoute: typeof rootRoute
    }
    '/executive/PresidentialSchedule': {
      id: '/executive/PresidentialSchedule'
      path: '/executive/PresidentialSchedule'
      fullPath: '/executive/PresidentialSchedule'
      preLoaderRoute: typeof ExecutivePresidentialScheduleImport
      parentRoute: typeof rootRoute
    }
    '/executive/VicePresident': {
      id: '/executive/VicePresident'
      path: '/executive/VicePresident'
      fullPath: '/executive/VicePresident'
      preLoaderRoute: typeof ExecutiveVicePresidentImport
      parentRoute: typeof rootRoute
    }
    '/faq/FAQ': {
      id: '/faq/FAQ'
      path: '/faq/FAQ'
      fullPath: '/faq/FAQ'
      preLoaderRoute: typeof FaqFAQImport
      parentRoute: typeof rootRoute
    }
    '/home/Overview': {
      id: '/home/Overview'
      path: '/home/Overview'
      fullPath: '/home/Overview'
      preLoaderRoute: typeof HomeOverviewImport
      parentRoute: typeof rootRoute
    }
    '/roadmap/Roadmap': {
      id: '/roadmap/Roadmap'
      path: '/roadmap/Roadmap'
      fullPath: '/roadmap/Roadmap'
      preLoaderRoute: typeof RoadmapRoadmapImport
      parentRoute: typeof rootRoute
    }
    '/status/Status': {
      id: '/status/Status'
      path: '/status/Status'
      fullPath: '/status/Status'
      preLoaderRoute: typeof StatusStatusImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/executive/PresidentialActions': typeof ExecutivePresidentialActionsRoute
  '/executive/PresidentialSchedule': typeof ExecutivePresidentialScheduleRoute
  '/executive/VicePresident': typeof ExecutiveVicePresidentRoute
  '/faq/FAQ': typeof FaqFAQRoute
  '/home/Overview': typeof HomeOverviewRoute
  '/roadmap/Roadmap': typeof RoadmapRoadmapRoute
  '/status/Status': typeof StatusStatusRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/executive/PresidentialActions': typeof ExecutivePresidentialActionsRoute
  '/executive/PresidentialSchedule': typeof ExecutivePresidentialScheduleRoute
  '/executive/VicePresident': typeof ExecutiveVicePresidentRoute
  '/faq/FAQ': typeof FaqFAQRoute
  '/home/Overview': typeof HomeOverviewRoute
  '/roadmap/Roadmap': typeof RoadmapRoadmapRoute
  '/status/Status': typeof StatusStatusRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/executive/PresidentialActions': typeof ExecutivePresidentialActionsRoute
  '/executive/PresidentialSchedule': typeof ExecutivePresidentialScheduleRoute
  '/executive/VicePresident': typeof ExecutiveVicePresidentRoute
  '/faq/FAQ': typeof FaqFAQRoute
  '/home/Overview': typeof HomeOverviewRoute
  '/roadmap/Roadmap': typeof RoadmapRoadmapRoute
  '/status/Status': typeof StatusStatusRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/executive/PresidentialActions'
    | '/executive/PresidentialSchedule'
    | '/executive/VicePresident'
    | '/faq/FAQ'
    | '/home/Overview'
    | '/roadmap/Roadmap'
    | '/status/Status'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/executive/PresidentialActions'
    | '/executive/PresidentialSchedule'
    | '/executive/VicePresident'
    | '/faq/FAQ'
    | '/home/Overview'
    | '/roadmap/Roadmap'
    | '/status/Status'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/executive/PresidentialActions'
    | '/executive/PresidentialSchedule'
    | '/executive/VicePresident'
    | '/faq/FAQ'
    | '/home/Overview'
    | '/roadmap/Roadmap'
    | '/status/Status'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ExecutivePresidentialActionsRoute: typeof ExecutivePresidentialActionsRoute
  ExecutivePresidentialScheduleRoute: typeof ExecutivePresidentialScheduleRoute
  ExecutiveVicePresidentRoute: typeof ExecutiveVicePresidentRoute
  FaqFAQRoute: typeof FaqFAQRoute
  HomeOverviewRoute: typeof HomeOverviewRoute
  RoadmapRoadmapRoute: typeof RoadmapRoadmapRoute
  StatusStatusRoute: typeof StatusStatusRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ExecutivePresidentialActionsRoute: ExecutivePresidentialActionsRoute,
  ExecutivePresidentialScheduleRoute: ExecutivePresidentialScheduleRoute,
  ExecutiveVicePresidentRoute: ExecutiveVicePresidentRoute,
  FaqFAQRoute: FaqFAQRoute,
  HomeOverviewRoute: HomeOverviewRoute,
  RoadmapRoadmapRoute: RoadmapRoadmapRoute,
  StatusStatusRoute: StatusStatusRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/executive/PresidentialActions",
        "/executive/PresidentialSchedule",
        "/executive/VicePresident",
        "/faq/FAQ",
        "/home/Overview",
        "/roadmap/Roadmap",
        "/status/Status"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/executive/PresidentialActions": {
      "filePath": "executive/PresidentialActions.tsx"
    },
    "/executive/PresidentialSchedule": {
      "filePath": "executive/PresidentialSchedule.tsx"
    },
    "/executive/VicePresident": {
      "filePath": "executive/VicePresident.tsx"
    },
    "/faq/FAQ": {
      "filePath": "faq/FAQ.tsx"
    },
    "/home/Overview": {
      "filePath": "home/Overview.tsx"
    },
    "/roadmap/Roadmap": {
      "filePath": "roadmap/Roadmap.tsx"
    },
    "/status/Status": {
      "filePath": "status/Status.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
